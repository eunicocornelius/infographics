{"version":3,"sources":["components/PplCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","PplCard","email","firstname","lastname","avatar","classes","Card","className","CardActionArea","CardMedia","component","alt","height","image","CardContent","Typography","gutterBottom","variant","color","CardActions","Button","href","size","App","useState","users","setUsers","useEffect","a","fetch","then","res","json","data","catch","err","console","log","fetchData","Grid","container","spacing","style","padding","map","user","key","id","item","xs","sm","md","lg","xl","first_name","last_name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gZAUMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,OAIC,SAASC,EAAT,GAA0D,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OACtDC,EAAUT,IAEhB,OACE,kBAACU,EAAA,EAAD,CAAMC,UAAWF,EAAQP,MACvB,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,IAAI,wBACJC,OAAO,MACPC,MAAOT,IAET,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKP,UAAU,MAC7CR,EAAY,IAAMC,GAErB,kBAACY,EAAA,EAAD,CAAYE,QAAQ,QAAQC,MAAM,gBAAgBR,UAAU,KACzDT,KAIP,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAMjB,EAAQkB,KAAK,QAAQJ,MAAM,WAAzC,mBCKOK,MArCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAiBb,OAdAC,qBAAU,WAAM,4CAEd,sBAAAC,EAAA,kEACEF,EADF,SAGUG,MAAM,sCACTC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASA,EAAIE,QAClBC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,EAAK,sBANvC,8EAFc,0DAWdG,KACC,IAGD,yBAAK/B,UAAU,OACb,6DACA,kBAACgC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIC,MAAO,CAAEC,QAAS,SAC5ClB,EAAMmB,KAAI,SAACC,GAAD,OACT,kBAACN,EAAA,EAAD,CAAMO,IAAKD,EAAKE,GAAIC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACxD,kBAACrD,EAAD,CACE8C,IAAKD,EAAKE,GACV9C,MAAO4C,EAAK5C,MACZC,UAAW2C,EAAKS,WAChBnD,SAAU0C,EAAKU,UACfnD,OAAQyC,EAAKzC,gBCtBPoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.6a5755f1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n});\r\n\r\nexport default function PplCard({ email, firstname, lastname, avatar }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component='img'\r\n          alt='Contemplative Reptile'\r\n          height='140'\r\n          image={avatar}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant='h5' component='h2'>\r\n            {firstname + \" \" + lastname}\r\n          </Typography>\r\n          <Typography variant='body2' color='textSecondary' component='p'>\r\n            {email}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button href={avatar} size='small' color='primary'>\r\n          Thumbnail Pic\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport personalData from \"./personal_data.json\";\nimport { Grid } from \"@material-ui/core\";\nimport PplCard from \"./components/PplCard\";\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    //async function to fetch data from API\n    async function fetchData() {\n      setUsers(\n        //await helps for getting the data first before continuing to next process the page\n        await fetch(\"https://reqres.in/api/users?page=2\")\n          .then((res) => res.json())\n          .then((res) => res.data)\n          .catch((err) => console.log(err, \"Fetch Warning!!\"))\n      );\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <div className='App'>\n      <h3>Responsive Material UI Layout</h3>\n      <Grid container spacing={10} style={{ padding: \"24px\" }}>\n        {users.map((user) => (\n          <Grid key={user.id} item xs={12} sm={6} md={4} lg={4} xl={3}>\n            <PplCard\n              key={user.id}\n              email={user.email}\n              firstname={user.first_name}\n              lastname={user.last_name}\n              avatar={user.avatar}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}