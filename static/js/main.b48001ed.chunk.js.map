{"version":3,"sources":["assets/images/pupil.png","assets/images/eye.png","components/eye/Eye.js","components/fade-carousel/FadeCarousel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Eye","_onMouseMove","e","balls","document","getElementsByClassName","x","clientX","window","innerWidth","y","clientY","innerHeight","console","log","style","left","top","transform","transitionDuration","_onMouseLeave","addEventListener","this","className","src","eyelid","pupil","Component","makeStyles","theme","root","backgroundColor","paper","margin","spacing","color","padding","fontFamily","fontSize","App","Grid","container","item","xs","md","justify","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,2RCmD5BC,E,4MAxCbC,aAAe,SAACC,GACd,IAAIC,EAAQC,SAASC,uBAAuB,QAExCC,EAAiB,IAAZJ,EAAEK,QAAiBC,OAAOC,WAAa,IAC5CC,EAAiB,IAAZR,EAAES,QAAiBH,OAAOI,YAAc,IAEjDC,QAAQC,IAAIZ,EAAEK,QAASL,EAAEK,SAEzBJ,EAAM,GAAGY,MAAMC,KAAOV,EACtBH,EAAM,GAAGY,MAAME,IAAMP,EACrBP,EAAM,GAAGY,MAAMG,UAAY,cAAgBZ,EAAI,KAAOI,EAAI,IAC1DP,EAAM,GAAGY,MAAMI,mBAAqB,M,EAGtCC,cAAgB,SAAClB,GACf,IAAIC,EAAQC,SAASC,uBAAuB,QAK5CF,EAAM,GAAGY,MAAMC,KAHP,MAIRb,EAAM,GAAGY,MAAME,IAHP,MAIRd,EAAM,GAAGY,MAAMG,UAAY,uBAC3Bf,EAAM,GAAGY,MAAMI,mBAAqB,O,kEA3BpCX,OAAOa,iBAAiB,YAAaC,KAAKrB,cAC1CO,OAAOa,iBAAiB,WAAYC,KAAKF,iB,+BA8BzC,OACE,yBAAKG,UAAU,QACb,yBAAKA,UAAU,SAASC,IAAKC,MAC7B,yBAAKF,UAAU,OACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QAAQC,IAAKE,a,GAtCtBC,a,oCCDAC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,gBAAiB,SAEnBC,MAAO,CACLC,OAAQJ,EAAMK,QAAQ,GACtBH,gBAAiB,gBACjBI,MAAO,UACPC,QAAS,kBACTC,WAAY,UACZC,SAAU,W,MCSCC,MAhBf,WACE,OACE,yBAAKhB,UAAU,OAEb,kBAACiB,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,QAAQ,UAChC,yBAAKtB,UAAU,aAAf,aACA,yBAAKA,UAAU,iBACb,kBAAC,EAAD,WCHQuB,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASiD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.b48001ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pupil.37d8bf34.png\";","module.exports = __webpack_public_path__ + \"static/media/eye.6549f117.png\";","import React, { Component } from 'react';\r\nimport './Eye.css';\r\nimport pupil from '../../assets/images/pupil.png';\r\nimport eyelid from '../../assets/images/eye.png';\r\n\r\nclass Eye extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('mousemove', this._onMouseMove);\r\n    window.addEventListener('mouseout', this._onMouseLeave);\r\n  }\r\n\r\n  _onMouseMove = (e) => {\r\n    var balls = document.getElementsByClassName('ball');\r\n\r\n    var x = (e.clientX * 100) / window.innerWidth + '%';\r\n    var y = (e.clientY * 100) / window.innerHeight + '%';\r\n\r\n    console.log(e.clientX, e.clientX);\r\n\r\n    balls[0].style.left = x;\r\n    balls[0].style.top = y;\r\n    balls[0].style.transform = 'translate(-' + x + ',-' + y + ')';\r\n    balls[0].style.transitionDuration = '0s';\r\n  };\r\n\r\n  _onMouseLeave = (e) => {\r\n    var balls = document.getElementsByClassName('ball');\r\n\r\n    var x = '50%';\r\n    var y = '50%';\r\n\r\n    balls[0].style.left = x;\r\n    balls[0].style.top = y;\r\n    balls[0].style.transform = 'translate(-' + x + ',-' + y + ')';\r\n    balls[0].style.transitionDuration = '.5s';\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='eyes'>\r\n        <img className='eyelid' src={eyelid} />\r\n        <div className='eye'>\r\n          <div className='ball'>\r\n            <img className='pupil' src={pupil} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Eye;\r\n","import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, Fade } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: 'black',\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: 'rgba(0,0,0,0)',\r\n    color: '#f4dfc0',\r\n    padding: '1vw 0vw 1vw 0vw',\r\n    fontFamily: 'Chenier',\r\n    fontSize: '2vw',\r\n  },\r\n}));\r\n\r\nconst FadeCarousel = ({ dataArray }) => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState(true);\r\n  const [carouselData, setCarousel] = React.useState(dataArray[0]);\r\n\r\n  const fadeTime = 5000;\r\n\r\n  useEffect(() => {\r\n    var count = 0;\r\n    // Interval Fade\r\n    setInterval(() => {\r\n      setChecked((prev) => !prev);\r\n    }, fadeTime);\r\n    // Interval Change Data\r\n    setInterval(() => {\r\n      if (count == dataArray.length - 1) {\r\n        count = 0;\r\n      } else count++;\r\n      setCarousel(dataArray[count]);\r\n    }, fadeTime * 2);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Fade\r\n        in={checked}\r\n        timeout={{\r\n          enter: fadeTime * 2,\r\n          exit: fadeTime * 2,\r\n        }}\r\n      >\r\n        <Paper elevation={4} className={classes.paper}>\r\n          {carouselData}\r\n        </Paper>\r\n      </Fade>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FadeCarousel;\r\n","import React from 'react';\nimport './App.css';\n// import personalData from './personal_data.json';\nimport Eye from './components/eye/Eye';\nimport { Grid } from '@material-ui/core';\nimport Header from './components/header/Header';\n\nfunction App() {\n  return (\n    <div className='App'>\n      {/* <Header /> */}\n      <Grid container>\n        <Grid item xs={12} md={4} justify='center'>\n          <div className='edu_title'>EDUCATION</div>\n          <div className='eye_container'>\n            <Eye />\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}